package br.com.fiap.baze.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import br.com.fiap.baze.banco.exception.IdNotFoundException;
import br.com.fiap.baze.to.BicicletaTO;
import br.com.fiap.baze.to.TelefoneUsuarioTO;

public class BicicletaDao {
	
	private Connection conexao;
	
	public BicicletaDao(Connection conexao) {
		this.conexao = conexao;
	}
	
	/**
	 * Usando o result set para retornar a bicicleta do usuario
	 * @param result
	 * @throws SQLException
	 */
	private BicicletaTO parse(ResultSet result) throws SQLException {
		int id = result.getInt("id_bike");
		int aro = result.getInt("nr_aro");
		double quadro = result.getDouble("nr_quadro");
		double peso = result.getInt("nr_peso");
		double altura = result.getDouble("nr_altura");
		String cor = result.getString("nm_cor");
		String tipo = result.getString("nm_tipo");
		int marcha = result.getInt("nr_marcha");
		
		return new BicicletaTO(id , aro, quadro, peso, altura, cor, tipo, marcha);
		
	}
	
	/**
	 * Cadastrar o telefone do usuario no banco
	 * @throws SQLException 
	 */
	
	public void cadastrarBicicleta(BicicletaTO bicicleta) throws SQLException {
		PreparedStatement ps = conexao.prepareStatement("insert into t_baze_telefone_usuario (id_telefone_usuario, "
				+ " nr_telefone, nr_ddd, nr_ddi) " + " values (sq_t_baze_telefone_usuario.nextval,?,?,?,?)");
		
		ps.setInt(1, bicicleta.getId());
		ps.setInt(2, bicicleta.getAro());
		ps.setDouble(3, bicicleta.getQuadro());
		ps.setDouble(4, bicicleta.getPeso());
		ps.setDouble(5, bicicleta.getAltura());
		ps.setString(6, bicicleta.getCor());
		ps.setString(7, bicicleta.getTipo());
		ps.setInt(8, bicicleta.getMarcha());
		
		ps.executeUpdate();
	}
	
	public void atualizarTelefone(TelefoneUsuarioTO telefone) throws SQLException, IdNotFoundException {
		PreparedStatement ps = conexao.prepareStatement("update t_baze_telefone_usuario set id_telefone_usuario = ?, nr_telefone = ?, nr_ddd = ?,"
				+ "nr_ddi = ?");
		
		ps.setInt(1, telefone.getId());
		ps.setInt(2, telefone.getCelular());
		ps.setInt(3, telefone.getDdd());
		ps.setInt(4, telefone.getDdi());
		
		int quantidade  = ps.executeUpdate();
		
			if(quantidade == 0) {
				throw new IdNotFoundException("telefone nao pode ser encontrado para efetivar a atualizacao ");
		}
	}
	
	/**
	 * Metodo que vai buscar o telefone pelo id
	 * @throws SQLException 
	 */
	
	public TelefoneUsuarioTO buscarTelefonePorId(int id) throws SQLException {
		PreparedStatement ps = conexao.prepareStatement("select * from t_baze_telefone_usuario where id_telefone_usuario = ?");
		
		ps.setInt(1, id);
		
		ResultSet result = ps.executeQuery();
		
		return parse(result);
	}
}
